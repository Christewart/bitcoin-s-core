package org.bitcoins.crypto

import org.scalacheck.Gen
import scodec.bits.ByteVector

object BCryptoGen {

  /** Random bytes generated by the [[BCryptoCryptoRuntime]]
    * This method makes no gurantees if the native random generator
    * or the browser random generator was used
    */
  def secureRandomBytes: Gen[ByteVector] = {
    for {
      numBytes <- Gen.choose(0, 100)
      random <- secureRandomBytes(numBytes)
    } yield random
  }

  /** Random bytes generated by the [[BCryptoCryptoRuntime]]
    * This method makes no gurantees if the native random generator
    * or the browser random generator was used
    */
  def secureRandomBytes(numBytes: Int): Gen[ByteVector] = {
    Gen.const(BCryptoCryptoRuntime.randomBytes(numBytes))
  }

  /** Random bytes generated by [[RandomBrowser]] */
  def secureRandomBrowserBytes(numBytes: Int): Gen[ByteVector] = {
    val buffer = RandomBrowser.randomBytes(numBytes)
    val byteVec = BCryptoUtil.bufferToByteVector(buffer)
    Gen.const(byteVec)
  }

  /** Random bytes generated by [[RandomBrowser]] */
  def secureRandomBrowserBytes: Gen[ByteVector] = {
    for {
      numBytes <- Gen.choose(1, 100)
      byteVec <- secureRandomBrowserBytes(numBytes)
    } yield byteVec
  }
}
